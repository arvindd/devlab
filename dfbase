# -*- mode: dockerfile -*-
# Base dockerfile
#
# This dockerfile is to build the basic opensuse/leap image based on which
# all the other application images will be built.
#
# To build a docker image based on this file, use:
#
# docker build --tag devlab/base:v1 --target base .
#
# Author: arvindd
# Created: 21.Apr.2021
#
# Copyright (c) 2021 Arvind Devarajan
# Licensed to you under the MIT License.
# See the LICENSE file in the project root for more information.
#

FROM opensuse/leap:15.2
LABEL Name="Base devlab image"
LABEL Description="This image is the base for all the other devlabs"

# All zypper commands have a -n for making them non-interactive
# First, make sure we have the latest repos and updates for
# all the packages installed.
# We also install the timezone package to first set the
# time zone, and our versatile vim
RUN zypper -n refresh && zypper -n update && \
    zypper -n install timezone neovim zsh \
              iputils unzip tar gzip bzip2 xz which iproute2 \
              sudo wget curl git tmux direnv python3 python3-pip

# Make sure that dates are correct within the container
RUN rm -f /etc/localtime /etc/localtime.rpmsave
RUN ln -s /usr/share/zoneinfo/Asia/Kolkata /etc/localtime

# Add all skel files so that any users created will get them
RUN mkdir -p /etc/skel/.config/pip/
COPY pip.conf /etc/skel/.config/pip/
COPY tmux.conf /etc/skel/.tmux.conf
RUN mkdir -p /etc/skel/bin/
RUN echo "(setq make-backup-files nil)" > /etc/skel/.emacs

# Special care for root, because this is created even before skel existed
RUN mkdir -p /root/.config/pip/
COPY pip.conf /root/.config/pip/
RUN echo "(setq make-backup-files nil)" > /root/.emacs
COPY zshrc.home.devlab /root/.zshrc

# Create a normal user for our usage and give sudo rights for that user
RUN useradd -s /bin/zsh -m -d /home/dev dev
RUN echo "dev ALL=(ALL) NOPASSWD:SETENV: /usr/bin/zypper,/bin/zsh" > /etc/sudoers.d/90_dev

# All our global applications go here
RUN mkdir -p /opt
RUN chown dev:users /opt

# Get the latest pip
RUN /usr/bin/python3 -m pip install --upgrade pip

# Copy and extract emacs 27.1
COPY emacs.tgz /opt/
RUN tar xzvf /opt/emacs.tgz
RUN rm /opt/emacs.tgz

# Some common aliases and functions to be added into /etc/zsh.zshrc.local
COPY zsh.zshrc.local /etc/
ENV PATH=/opt/jupyter/srv/bin:/opt/julia/bin:/opt/scripts:${PATH}

# Create a homesave directory for saving home contents (see explanations below)
RUN mkdir -p /opt/homesave
RUN chown -R dev:users /opt/homesave

# Now, install everything else with the user's id
USER dev
WORKDIR /home/dev

# We will create a .zshrc file here: any existing .zshrc will be overwritten
# This allows for setting of environment variables on a per-directory basis
# Also, environment variables set in a parent directory is accessible in all
# its sub-directories.
    
# Add node for jupyter lab's extensions
RUN curl https://nodejs.org/dist/v16.0.0/node-v16.0.0-linux-x64.tar.xz -o /opt/node.tar.xz
RUN tar xJvf /opt/node.tar.xz --transform 's@node-v16.0.0-linux-x64@node@' -C /opt
RUN rm -f /opt/node.tar.xz
# Touch a file with the version number of node so that it
# is easy to know the version inside the devlab.
RUN touch /opt/node/v16.0.0-linux-x64

# Add Julia as a base language (apart from Python3 that is already present)
RUN curl https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz -o /opt/julia.tar.gz
RUN tar xzvf /opt/julia.tar.gz --transform 's@julia-1.6.1@julia@' -C /opt
RUN rm -f /opt/julia.tar.gz
RUN touch /opt/julia/v1.6.1

# Install Jupyter in /opt/jupyter
ENV JUPYTER_HOME=/opt/jupyter
ENV JUPYTER_CONFIG_DIR=${JUPYTER_HOME}/config
ENV JUPYTER_DATA_DIR=${JUPYTER_HOME}/data
ENV JUPYTER_RUNTIME_DIR=${JUPYTER_HOME}/runtime
ENV JUPYTERLAB_WORKSPACES_DIR=${JUPYTER_HOME}/workspaces
ENV JUPYTER_NBDIR=${JUPYTER_HOME}/nb
RUN pip install --target ${JUPYTER_HOME}/srv jupyterlab
ENV PYTHONPATH=${PYTHONPATH}:/opt/jupyter/srv

# Generate Jupyter configuration for notebooks
# We will make jupyter listen on a specific port number.
# JPYPORT is passed to us as a build-arg
ARG JPYPORT
RUN jupyter lab --generate-config
RUN jupyter notebook --generate-config

# Change the location of the notebook directory
RUN sed -i "s@.*c.NotebookApp.notebook_dir\ .*@c.NotebookApp.notebook_dir\ =\ \'/home/dev/work\'@" ${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py

# Help jupyter find it's static assets
RUN sed -i "s@.*c.LabApp.app_dir\ .*@c.LabApp.app_dir\ =\ \'/opt/jupyter/srv/share/jupyter/lab\'@" ${JUPYTER_CONFIG_DIR}/jupyter_lab_config.py

# Change the port of jupyter lab and make sure it listens on all interfaces
RUN sed -i "s@.*c.ServerApp.port\ .*@c.ServerApp.port\ =\ ${JPYPORT}@" ${JUPYTER_CONFIG_DIR}/jupyter_lab_config.py
RUN sed -i "s@.*c.ServerApp.ip\ .*@c.ServerApp.ip\ =\ \'*\'@" ${JUPYTER_CONFIG_DIR}/jupyter_lab_config.py

# Install the IJulia package to use Julia with Jupyter
RUN julia -e 'using Pkg; Pkg.add("IJulia");'

# Add SSL certificates
# RUN mkdir -p /opt/ssl
# COPY --chown=dev:users ["localhost.key", "localhost.crt", "/opt/ssl/"]
# RUN sed -i "s@.*c.ServerApp.certfile\ .*@c.ServerApp.certfile\ =\ \'/opt/ssl/localhost.crt\'@" ${JUPYTER_CONFIG_DIR}/jupyter_lab_config.py
# RUN sed -i "s@.*c.ServerApp.keyfile\ .*@c.ServerApp.keyfile\ =\ \'/opt/ssl/localhost.key\'@" ${JUPYTER_CONFIG_DIR}/jupyter_lab_config.py
# Install Oh-my-zsh
# RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --keep-zshrc
# ---------------
# Typical way of using curl/wget from raw github does not work sometimes if github raw access is
# having a problem. Hence we go another way: clone the github repo, and then execute install from there.
RUN git clone https://github.com/ohmyzsh/ohmyzsh.git tmpozsh
RUN tmpozsh/tools/install.sh --keep-zshrc
RUN rm -rf tmpozsh
# ---------------
RUN sed -i 's/ZSH_THEME=.*/ZSH_THEME=\"agnoster\"/' ~/.zshrc

# If sourcing our special .zshrc is not already in there, source our .zshrc.devlab in .zshrc
COPY zshrc.home.devlab ./.zshrc.home.devlab
RUN if ! grep -q ".zshrc.home.devlab" ~/.zshrc; then echo "# The next line is added by devlab; DO NOT REMOVE IT!"; echo ". ~/.zshrc.home.devlab" >> ~/.zshrc; fi

# Finally, just create a DEVLABLANG
RUN echo export DEVLABLANG=base-v1 > .envrc

# Move all files in the home directory into a safe location in the container.
# On startup, we will move back these files into the home directory so that it is possible
# to mount a host directory into the home location. 
# By default, if a file exists in a directory inside the container, and the same location is also
# used for mounting a host-directory, the existing files in the container are not seen (they are overlayed).
# We therefore use this "move home while build and move them back at the startup" idea to allow for mounting
# a host directory on the home location.
# Now, why are we particular to mount a host on the home? Well, this allows for new installations by the
# user of our devlab in their own home - and since we mount a host on to home, these installations 
# remain across container sessions as long as the same directory is mounted again on every startup. Some
# package managers such as pip automatically install their packages in home directories if they are not
# able to access site-wide locations (due to permissions) - and these scenarios are automatically taken
# care by our "mount host dir on home" method.
RUN zsh -c "mv /home/dev/*(DN) /opt/homesave/"

# Default port of the jupyter lab is exposed here
EXPOSE ${JPYPORT}
RUN mkdir -p /opt/scripts
COPY ["starttmux", "entrypoint", "/opt/scripts/"]
ENTRYPOINT [ "/opt/scripts/entrypoint" ]