#!/bin/bash
#
# Starts the base image for use as a shell.
#
# The latest version of this script is available at:
#
# https://raw.githubusercontent.com/onspot-tools/devlab/master/startscripts/devlab
#
# If you already have devlab with you, the script is also in there:
#
# docker cp devlab:/opt/scripts/devlab .
#
# will get this script out from a running devlab. Note that the
# script got from your devlab might not be the latest one published
# unless you have also pulled the latest devlab from dockerhub:
#
# docker pull onspot/devlab-<lang>:<version>
#
# Copyright (c) 2021 Arvind Devarajan
# Licensed to you under the MIT License.
# See the LICENSE file in the project root for more information.
#

###################################################
# 
###################################################

usage() {
cat << EOF 
devlab [-l <lang>] [-v <version>] [-p <port>] <command>

Options:
-l <lang> - Language devlab to be started. Default: Python and Julia
-v <version> - Version of the language devlab to be started. Default: latest
-p <port> - Port on which devlab listens. Default: 9000

<command> can be one of:
tmux - Starts a zsh shell with tmux
lab - Starts the jupyter lab
nb OR notebook - Starts the jupyter notebook
shell - Starts (or connects to a running) devlab with a zsh shell without tmux
stop - Stops the started jupyter (lab or notebook)

If no command is given, default is "lab".
EOF
}

# First, collect all options
while getopts "l:v:p:" opt; do
    case ${opt} in
        l)
            lang=${OPTARG}
            ;;
        v)
            ver=${OPTARG}
            ;;
        p)  
            port=${OPTARG}
            ;;
        *)
            usage;;
    esac
done
shift $(expr $OPTIND - 1 )

# Fix all default arguments
progarg=$1
progarg=${progarg:=lab}
lang=${lang:=base}
ver=${ver:=latest}
port=${port:=9000}

# Build parameters
REPONAME=onspot/devlab
LANG=$lang
VERSION=$ver

# Run parameters
JPYPORT=9000        # Port in which devlab runs (within the container)
HPORT=$port         # Port in which devlab should run on the host machine

# Adjust the image and container names based on the language name
if [[ $LANG == "base" ]]; then
    IMGNAME=${REPONAME}  # For base devlab, we'll keep the image name simple
    CNAME=devlab         # For base devlab, we'll keep the container name simple    
else
    IMGNAME="${REPONAME}-${LANG}"
    CNAME="devlab-${LANG}"    
fi

# Check if we are already running the devlab
docker ps --filter "name=^${CNAME}$" | tail -1 | grep -q ${CNAME}
if [[ $? -eq 0 ]]; then
    # devlab is already running; we only allow to shell into it
    # or stop it if asked for. For any other command, ask the user
    # to stop it.
    if [[ $progarg == "shell" ]]; then
        docker exec -it ${CNAME} /bin/zsh
        exit 0
    elif [[ $progarg == "stop" ]]; then
        echo -n "Stopped "
        docker stop ${CNAME}
        exit 0
    else
        echo -e "\033[0;31mdevlab is already running.\033[0m"
        echo "You can shell into it with 'devlab -l ${CNAME} shell'."
        echo "OR stop it with 'devlab -l ${CNAME} stop' before starting again."
        exit 1
    fi
else
    # devlab is not running. We will not accept '--stop' as an argument
    # because, well, you cannot stop a stopped devlab :-)    
    if [[ $progarg == "stop" ]]; then
        echo "devlab is not running. Refusing to stop a stopped devlab."
        exit 1
    fi    
fi    

# If we have a "trustedcerts" directory where we are running the devlab, just mount it
# to /opt/certs. This directory contains additional PEM certificates that may be needed to 
# access the internet when done behind a corporate proxy.
if [[ -d trustedcerts && "$(ls -A trustedcerts)" ]]; then
    MOUNT_CERTS="--mount type=bind,src=${PWD}/trustedcerts,dst=/opt/certs,ro"
else
    MOUNT_CERTS=""
fi

# Run devlab based on the above configurations. 
# The command to be run comes from the case-statement below.
rundevlab() {
    local cmd=$1
    local mode=$2

    docker run --rm -p ${HPORT}:${JPYPORT} ${mode} --mount src=devlab-${LANG}-${VERSION},dst=/home/dev ${MOUNT_CERTS} --name ${CNAME} --hostname localhost ${IMGNAME}:${VERSION} ${cmd}
}

# This function extracts jupyter information from the logs and prints the same on the console
# to be used by the user. Note that this function also adjusts for the port number based on where
# the devlab is listening.
printjpyinfo() {
    local logs=$1

    info=$(echo "$logs" | grep -v "^\[.*" | sed s/^\ \ \ \ // | sed s@:$JPYPORT/@:$HPORT/@)
    echo -e "$info\n"

    # The above information must have contained the http URL of jupyter. If it did not contain, jupyter must have taken long time
    # to startup - so the URL can only be got from docker logs.
    if [[ $info != *"?token="* ]]; then
        echo -e '\033[0;31mJupyter took unusually long time to start.\033[0m'
        echo 'Use "docker logs ${CNAME}" to get the URLs to access Jupyter.'

        if [[ $JPYPORT -ne $HPORT ]]; then
            echo "NOTE: *** In the URL shown, use $HPORT as the port number instead of $JPYPORT ***"            
        fi
    fi
}

# Depending on what we want to start, set up docker parameters
case $progarg in
"help")
    usage
    exit 0
    ;;
"shell")
    rundevlab "/bin/zsh" "-it" 

    if [[ $? -ne 0 ]]; then
        echo -e '\033[0;31mdevlab failed to start, see above for the error details.\033[0m'
        echo "Errors due to binding of ports can be circumvented with -p <port> option,"        
        echo "where <port> should be a different port number than what is mentioned with the error above."             
    fi    
    ;;
"lab")
    echo "Starting ${CNAME}..."
    rundevlab "jupyter lab --no-browser" "-d"    

    if [[ $? -eq 0 ]]; then
        sleep 2
        printjpyinfo "$(docker logs ${CNAME} 2>&1)"
    else
        echo -e '\033[0;31mdevlab failed to start, see above for the error details.\033[0m'
        echo "Errors due to binding of ports can be circumvented with -p <port> option,"
        echo "where <port> should be a different port number than what is mentioned with the error above."        
    fi
    ;;
"nb" | "notebook")
    echo "Starting ${CNAME} notebook..."
    rundevlab "jupyter notebook --no-browser" "-d"    

    if [[ $? -eq 0 ]]; then
        sleep 2
        printjpyinfo "$(docker logs ${CNAME} 2>&1)"
    else
        echo -e '\033[0;31mdevlab failed to start, see above for the error details.\033[0m'
        echo "Errors due to binding of ports can be circumvented with -p <port> option,"
        echo "where <port> should be a different port number than what is mentioned with the error above."             
    fi
    ;;    
"tmux")
    rundevlab "starttmux" "-it"

    if [[ $? -ne 0 ]]; then
        echo -e '\033[0;31mdevlab failed to start, see above for the error details.\033[0m'
        echo "Errors due to binding of ports can be circumvented with -p <port> option,"        
        echo "where <port> should be a different port number than what is mentioned with the error above."             
    fi
    ;;
*)
    echo -e "\033[0;31mInvalid command. Usage:\033[0m"
    usage
    exit 1
    ;;
esac
