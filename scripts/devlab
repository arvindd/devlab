#!/bin/bash
#
# Starts the base image for use as a shell.
#
# The latest version of this script is available at:
#
# https://raw.githubusercontent.com/ramdootin/devlab/master/startscripts/devlab
#
# If you already have devlab with you, the script is also in there:
#
# docker cp devlab:/opt/scripts/devlab .
#
# will get this script out from a running devlab. Note that the
# script got from your devlab might not be the latest one published
# unless you have also pulled the latest devlab from dockerhub:
#
# docker pull ramdootin/devlab:<lang>-<version>
#
# Author: arvindd
# Created: 21.Apr.2021
#
# Copyright (c) 2021 Arvind Devarajan
# Licensed to you under the MIT License.
# See the LICENSE file in the project root for more information.
#

###################################################
# 
###################################################

# First, collect all options
while getopts "l:v:" opt; do
    case ${opt} in
        l)
            lang=${OPTARG}
            ;;
        v)
            ver=${OPTARG}
            ;;
        *)
            echo "Usage: `echo $0 | sed 's/\.\///'` [-l <lang>] [command]"
            exit -1
            ;;
    esac
done
shift $(expr $OPTIND - 1 )

# Fix all default arguments
progarg=$1
progarg=${progarg:=tmux}
lang=${lang:=base}
ver=${ver:=1}

# Check if we are already running the devlab
docker ps --filter "name=devlab" | tail -1 | grep -q devlab
if [[ $? -eq 0 ]]; then
    # devlab is already running; so either stop it or 
    # ask the user to stop it.
    if [[ $progarg == "stop" ]]; then
        echo "Stopped"
        docker stop devlab
        exit 0
    else
        echo "devlab is already running."
        echo "Stop it with 'devlab stop' before starting again."
        exit 1
    fi
else
    # devlab is not running. We will not accept '--stop' as an argument
    # because, well, you cannot stop a stopped devlab :-)    
    if [[ $progarg == "stop" ]]; then
        echo "devlab is not running. Refusing to stop a stopped devlab."
        exit 1
    fi    
fi    

# Build parameters
REPONAME=ramdootin/devlab
LANG=$lang
VERSION=$ver

# Run parameters
HNAME=devlab
JPYPORT=9000

# Adjust the image name based on the language name
if [[ $LANG == "base" ]]; then
    IMGNAME=${REPONAME}  # For base devlab, we'll keep the image name simple
else
    IMGNAME="${REPONAME}-${LANG}"
fi

# If we have a "trustedcerts" directory where we are running the devlab, just mount it
# to /opt/certs. This directory contains additional PEM certificates that may be needed to 
# access the internet when done behind a corporate proxy.
if [[ -d trustedcerts && "$(ls -A trustedcerts)" ]]; then
    MOUNT_CERTS="--mount type=bind,src=${PWD}/trustedcerts,dst=/opt/certs,ro"
else
    MOUNT_CERTS=""
fi

case $progarg in
"notmux")
    docker run --rm -p ${JPYPORT}:${JPYPORT} -it --mount src=devlab-${LANG}-${VERSION},dst=/home/dev ${MOUNT_CERTS} --name ${HNAME} --hostname ${HNAME} ${IMGNAME}:${VERSION} /bin/zsh
    ;;
"jupyter")
    echo "Starting devlab..."
    docker run --rm -p ${JPYPORT}:${JPYPORT} -d --mount src=devlab-${LANG}-${VERSION},dst=/home/dev ${MOUNT_CERTS} --name ${HNAME} --hostname localhost ${IMGNAME}:${VERSION} jupyter-lab
    sleep 2
    docker logs ${HNAME}
    echo 'If the URL for accessing your jupyter notebook is not shown above,'
    echo 'just use "docker logs devlab" to get it. You may need to use it'
    echo 'multiple times until you get the URL.'
    ;;
*)
    docker run --rm -p ${JPYPORT}:${JPYPORT} -it --mount src=devlab-${LANG}-${VERSION},dst=/home/dev ${MOUNT_CERTS} --name ${HNAME} --hostname ${HNAME} ${IMGNAME}:${VERSION} starttmux
esac
